{"version":3,"file":"392.index.mjs","mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://todo-reporter/./node_modules/json2xml/lib/json2xml.js","webpack://todo-reporter/./node_modules/leasot/dist/lib/reporters/xml.js"],"sourcesContent":["/**\n * Converts JSON object to XML string.\n *\n *\n * Copyright(c) 2011 Etienne Lachance <et@etiennelachance.com>\n * MIT Licensed\n */\n\n/*\n * Modifications (Ivo Georgiev <ivo@linvo.org>):\n *  Escape XML entities to avoid breaking the XML if any string in the JSON contains a special char\n *  Ignore special objects - objects that inherit other objects (in practice, when working with a third-party library, most of those are circular structures)\n */\n\n /*\n *  Modifications (Alan Clarke <hi@alz.so>):\n *  added unit tests, ability to add xml node attributes, xml header option and simplified syntax\n *  removed root node, this is already covered by the module's default functionality\n */\n\nvar util = require('util');\n\nvar settings = {\n    attributes_key: false,\n    header: false\n};\n\nmodule.exports = function xml(json, opts) {\n    'use strict';\n\n    if (opts) {\n        Object.keys(settings).forEach(function (k) {\n            if (opts[k] === undefined) {\n                opts[k] = settings[k];\n            }\n        });\n    } else {\n        opts = settings;\n    }\n\n    var result = opts.header ? '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' : '';\n    opts.header = false;\n\n    if (!!json.length && typeof json !== 'string') { //Array\n        json.forEach(function (node) {\n            result += xml(node, opts);\n        });\n    } else if (typeof json === 'object') {\n        Object.keys(json).forEach(function (key) {\n            if (key !== opts.attributes_key) {\n                var node = json[key],\n                    attributes = '';\n\n                if (node === undefined || node === null) {\n                    node = '';\n                }\n\n                if (opts.attributes_key && json[opts.attributes_key]) {\n                    Object.keys(json[opts.attributes_key]).forEach(function (k) {\n                        attributes += util.format(' %s=\"%s\"', k, json[opts.attributes_key][k]);\n                    });\n                }\n                var inner = xml(node, opts);\n\n                if (inner) {\n                    result += util.format(\"<%s%s>%s</%s>\", key, attributes, xml(node, opts), key);\n                } else {\n                    result += util.format(\"<%s%s/>\", key, attributes);\n                }\n            }\n        });\n    } else {\n        return json.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n    }\n\n    return result;\n};\n","import json2xml from 'json2xml';\nexport const reporter = (todos, config = { header: true }) => {\n    return json2xml(todos, {\n        header: config.header,\n        attributes_key: config.attributes_key,\n    });\n};\n"],"names":[],"sourceRoot":""}