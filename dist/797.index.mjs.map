{"version":3,"file":"797.index.mjs","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://todo-reporter/./node_modules/leasot/dist/lib/parsers/latexParser.js"],"sourcesContent":["import { getRegex, prepareComment } from '../utils/index.js';\nimport eol from 'eol';\n// I know this is different style, but I wasn't able to get the escape\n// characters right\nconst parserFactory = ({ customTags }) => {\n    const regex = getRegex(customTags);\n    const commentsRegex = new RegExp(`^\\\\s*%${regex}$`, 'mig');\n    return (contents, file) => {\n        const comments = [];\n        eol.split(contents).forEach((line, index) => {\n            let hashMatch = commentsRegex.exec(line);\n            while (hashMatch) {\n                const comment = prepareComment(hashMatch, index + 1, file);\n                if (!comment) {\n                    break;\n                }\n                comments.push(comment);\n                hashMatch = commentsRegex.exec(line);\n            }\n            commentsRegex.lastIndex = 0;\n        });\n        // doing the multi line match outside of the loop because we need\n        // multiple lines\n        const multilineRegex = new RegExp('^[ |\\\\t]*\\\\\\\\begin{comment}\\\\s*@?(todo|fixme)(?!\\\\w)\\\\s*(?:\\\\(([^)]*)\\\\))?\\\\s*:?\\\\s*((.*?)(?:\\\\s+([^\\\\s]+)\\\\s*)?)\\\\\\\\end{comment}', 'gmi');\n        let m;\n        while ((m = multilineRegex.exec(contents)) !== null) {\n            // This is necessary to avoid infinite loops with zero-width matches\n            if (m.index === multilineRegex.lastIndex) {\n                multilineRegex.lastIndex++;\n            }\n            // Since we no longer know the line number as index, we have to\n            // count it out. This could be inefficient for large files, so I\n            // hope it doesn't become a performance problem\n            const preceeding_lines = contents.slice(0, m.index);\n            const line_no = preceeding_lines.split(/\\r\\n|\\r|\\n/).length;\n            // Now prepare the comment\n            const comment = prepareComment(m, line_no, file);\n            comments.push(comment);\n        }\n        return comments;\n    };\n};\nexport default parserFactory;\n"],"names":[],"sourceRoot":""}