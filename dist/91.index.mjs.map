{"version":3,"file":"91.index.mjs","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://todo-reporter/./node_modules/leasot/dist/lib/reporters/custom.js","webpack://todo-reporter/./node_modules/leasot/dist/lib/reporters/markdown.js"],"sourcesContent":["import _ from 'lodash';\nimport { EOL } from 'os';\n/**\n * @hidden\n */\nexport const getTransformedComments = (todos, config) => {\n    const transformFn = config.transformComment;\n    if (!todos.length) {\n        //early return in case of no comments\n        //FIXME: make the default header a configurable option\n        return {\n            TODO: [],\n        };\n    }\n    return todos.reduce(function (mem, comment) {\n        const tag = comment.tag;\n        mem[tag] = mem[tag] || [];\n        // transformed comment as an array item\n        let transformedComment = transformFn(comment.file, comment.line, comment.text, tag, comment.ref);\n        // enforce array type\n        if (!Array.isArray(transformedComment)) {\n            transformedComment = [transformedComment];\n        }\n        // append to tag array\n        mem[tag] = mem[tag].concat(transformedComment);\n        return mem;\n    }, {});\n};\n/**\n * @hidden\n */\nexport const joinBlocksByHeaders = (output, config) => {\n    const padding = config.padding;\n    const newLine = config.newLine;\n    const transformHeader = config.transformHeader;\n    let header;\n    let contents = '';\n    //prepend headers\n    Object.keys(output).forEach(function (tag) {\n        header = transformHeader(tag);\n        // enforce array response\n        if (!Array.isArray(header)) {\n            header = [header];\n        }\n        output[tag] = _.compact(header.concat(output[tag]));\n        // add padding between tag blocks\n        if (contents.length) {\n            contents += new Array(padding + 1).join(newLine);\n        }\n        contents += output[tag].join(newLine);\n    });\n    return contents;\n};\n/**\n * @hidden\n */\nexport const prepareConfig = (defaultConfig, overrides) => {\n    const config = _.defaults({}, overrides, defaultConfig, {\n        newLine: EOL,\n        padding: 2,\n    });\n    if (typeof config.transformHeader !== 'function') {\n        throw new TypeError('transformHeader must be a function');\n    }\n    if (typeof config.transformComment !== 'function') {\n        throw new TypeError('transformComment must be a function');\n    }\n    // padding must be a minimum of 0\n    // enforce padding to be a number as well\n    config.padding = Math.max(0, config.padding);\n    return config;\n};\nconst reporterConfig = {\n    transformComment(file, line, text, _tag, ref) {\n        return [`file: ${file}`, `line: ${line}`, `text: ${text}`, `ref:${ref}`];\n    },\n    transformHeader(tag) {\n        return [`tag: ${tag}`];\n    },\n};\nexport const reporter = (todos, config) => {\n    const parsedConfig = prepareConfig(reporterConfig, config);\n    const output = getTransformedComments(todos, parsedConfig);\n    return joinBlocksByHeaders(output, parsedConfig);\n};\n","import { getTransformedComments, joinBlocksByHeaders, prepareConfig } from './custom.js';\nconst reporterConfig = {\n    transformComment(file, line, text, _tag, ref) {\n        if (ref) {\n            text = `@${ref} ${text}`;\n        }\n        return [`| [${file}](${file}#L${line}) | ${line} | ${text} |`];\n    },\n    transformHeader(tag) {\n        return [`### ${tag}s`, `| Filename | line # | ${tag} |`, '|:------|:------:|:------|'];\n    },\n};\nexport const reporter = (todos, config) => {\n    const parsedConfig = prepareConfig(reporterConfig, config);\n    const output = getTransformedComments(todos, parsedConfig);\n    return joinBlocksByHeaders(output, parsedConfig);\n};\n"],"names":[],"sourceRoot":""}