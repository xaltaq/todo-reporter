{"version":3,"file":"767.index.mjs","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://todo-reporter/./node_modules/leasot/dist/lib/parsers/hamlParser.js"],"sourcesContent":["import { getRegex, prepareComment } from '../utils/index.js';\nimport eol from 'eol';\nconst parserFactory = ({ customTags }) => {\n    const regex = getRegex(customTags);\n    const hamlRubyComment = new RegExp(`^\\\\s*-#${regex}$`, 'mig');\n    const hamlHtmlComment = new RegExp(`^\\\\s*/${regex}$`, 'mig');\n    const erbComment = new RegExp(`<%#${regex}%>`, 'mig');\n    const htmlComment = new RegExp(`<!--${regex}-->`, 'mig');\n    return function parse(contents, file) {\n        const comments = [];\n        eol.split(contents).forEach(function (line, index) {\n            let hamlRubyCommentMatch = hamlRubyComment.exec(line);\n            let hamlHtmlCommentMatch = hamlHtmlComment.exec(line);\n            let erbCommentMatch = erbComment.exec(line);\n            let htmlCommentMatch = htmlComment.exec(line);\n            while (hamlRubyCommentMatch) {\n                const comment = prepareComment(hamlRubyCommentMatch, index + 1, file);\n                if (!comment) {\n                    break;\n                }\n                comments.push(comment);\n                hamlRubyCommentMatch = hamlRubyComment.exec(line);\n            }\n            hamlRubyComment.lastIndex = 0;\n            while (hamlHtmlCommentMatch) {\n                const comment = prepareComment(hamlHtmlCommentMatch, index + 1, file);\n                if (!comment) {\n                    break;\n                }\n                comments.push(comment);\n                hamlHtmlCommentMatch = hamlHtmlComment.exec(line);\n            }\n            hamlHtmlComment.lastIndex = 0;\n            while (erbCommentMatch) {\n                const comment = prepareComment(erbCommentMatch, index + 1, file);\n                if (!comment) {\n                    break;\n                }\n                comments.push(comment);\n                erbCommentMatch = erbComment.exec(line);\n            }\n            erbComment.lastIndex = 0;\n            while (htmlCommentMatch) {\n                const comment = prepareComment(htmlCommentMatch, index + 1, file);\n                if (!comment) {\n                    break;\n                }\n                comments.push(comment);\n                htmlCommentMatch = htmlComment.exec(line);\n            }\n            htmlComment.lastIndex = 0;\n        });\n        return comments;\n    };\n};\nexport default parserFactory;\n"],"names":[],"sourceRoot":""}